(ns phzr.impl.accessors.physics.p2.body)

(def body-get-properties
  {:y "y"
   :allow-sleep "allowSleep"
   :sleep-speed-limit "sleepSpeedLimit"
   :dirty "dirty"
   :mass "mass"
   :collides-with "collidesWith"
   :rotation "rotation"
   :force "force"
   :offset "offset"
   :game "game"
   :motion-state "motionState"
   :on-begin-contact "onBeginContact"
   :static "static"
   :inertia "inertia"
   :type "type"
   :kinematic "kinematic"
   :debug "debug"
   :angle "angle"
   :collide-world-bounds "collideWorldBounds"
   :gravity "gravity"
   :on-end-contact "onEndContact"
   :sprite "sprite"
   :world "world"
   :angular-force "angularForce"
   :damping "damping"
   :debug-body "debugBody"
   :dynamic "dynamic"
   :angular-damping "angularDamping"
   :id "id"
   :fixed-rotation "fixedRotation"
   :x "x"
   :angular-velocity "angularVelocity"
   :velocity "velocity"
   :remove-next-step "removeNextStep"})

(def body-set-properties
  {:y "y"
   :allow-sleep "allowSleep"
   :sleep-speed-limit "sleepSpeedLimit"
   :dirty "dirty"
   :mass "mass"
   :collides-with "collidesWith"
   :rotation "rotation"
   :force "force"
   :offset "offset"
   :game "game"
   :motion-state "motionState"
   :on-begin-contact "onBeginContact"
   :static "static"
   :inertia "inertia"
   :type "type"
   :kinematic "kinematic"
   :debug "debug"
   :angle "angle"
   :collide-world-bounds "collideWorldBounds"
   :gravity "gravity"
   :on-end-contact "onEndContact"
   :sprite "sprite"
   :world "world"
   :angular-force "angularForce"
   :damping "damping"
   :debug-body "debugBody"
   :dynamic "dynamic"
   :angular-damping "angularDamping"
   :fixed-rotation "fixedRotation"
   :x "x"
   :angular-velocity "angularVelocity"
   :velocity "velocity"
   :remove-next-step "removeNextStep"})